generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int           @id @default(autoincrement())
  name        String
  email       String        @unique
  password    String
  createdAt   DateTime      @default(now())
  Task        Task[]
  Project     Project[]
  UserProject UserProject[]
  UserTask    UserTask[]

  @@map("users")
}

model Feature {
  id        Int      @id @default(autoincrement())
  title     String
  projectId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  Task      Task[]
  project   Project  @relation(fields: [projectId], references: [id])

  @@map("features")
}

model Task {
  id                           Int      @id @default(autoincrement())
  title                        String
  priority                     Int
  assignedTo                   Int?
  deadline                     DateTime
  deliverableExplanation       String   @db.Text
  technicalBackendDescription  String   @db.Text
  technicalFrontendDescription String   @db.Text
  createdAt                    DateTime @default(now())
  updatedAt                    DateTime @default(now())
  featureId                    Int

  feature      Feature       @relation(fields: [featureId], references: [id])
  assignedUser User?         @relation(fields: [assignedTo], references: [id])
  KanbanBoard  KanbanBoard[]
  UserTask     UserTask[]
  TaskProject  TaskProject[]

  @@map("tasks")
}

model Project {
  id          Int      @id @default(autoincrement())
  code        String   @unique
  name        String
  niche       String
  description String
  ownerId     Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  owner        User           @relation(fields: [ownerId], references: [id])
  KanbanColumn KanbanColumn[]
  KanbanBoard  KanbanBoard[]
  UserProject  UserProject[]
  TaskProject  TaskProject[]
  Feature      Feature[]

  @@map("projects")
}

model KanbanColumn {
  id        Int      @id @default(autoincrement())
  name      String
  position  Int
  projectId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project     Project       @relation(fields: [projectId], references: [id])
  KanbanBoard KanbanBoard[]

  @@map("kanban_columns")
}

model KanbanBoard {
  id            Int      @id @default(autoincrement())
  projectId     Int
  taskId        Int
  columnId      Int
  orderAtColumn Int
  createdAt     DateTime @default(now())

  project      Project      @relation(fields: [projectId], references: [id])
  task         Task         @relation(fields: [taskId], references: [id])
  kanbanColumn KanbanColumn @relation(fields: [columnId], references: [id])
}

model UserProject {
  id        Int      @id @default(autoincrement())
  userId    Int
  projectId Int
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  project Project @relation(fields: [projectId], references: [id])

  @@map("user_projects")
}

model UserTask {
  id        Int      @id @default(autoincrement())
  userId    Int
  taskId    Int
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  task Task @relation(fields: [taskId], references: [id])

  @@map("user_tasks")
}

model TaskProject {
  id        Int      @id @default(autoincrement())
  taskId    Int
  projectId Int
  createdAt DateTime @default(now())

  task    Task    @relation(fields: [taskId], references: [id])
  project Project @relation(fields: [projectId], references: [id])

  @@map("task_projects")
}
